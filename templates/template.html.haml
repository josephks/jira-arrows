- space_bet_rows = 6
- num_cols = 6
- space_bet_tiers = 3
- space_bet_clusters = 5
%html
  %head
    %title
      JIRA dependency graph
    %meta{name: :description, content: "Built at #{ Time.now } by jira-arrows version #{ version } "}
    %style{ type: 'text/css' }= File.read( File.expand_path('jira-arrows.css', template_dir) )
    %style{ type: 'text/css' }
      - graph.all_nodes_clustered(true).flatten.each do |node|
        = "##{node.name} { background-color: #{node[:color]} }"

  %body{ 'data-demo-id' => "demo", 'data-library' => "jquery"}

    %div{style:"position:absolute"}
      #model_map
        #main
        - top_start = -1 * (space_bet_clusters - 1)
        - graph.all_nodes_clustered(true).each_with_index do |cluster, cluster_idx|
          - top_start += space_bet_clusters
          - cluster.each_with_index do |tier, tier_idx|
            - tier.each_with_index do |mcc_node, idx|
              - classname = 'noparent' if mcc_node.is_orphan?
              .model.component.window{id: mcc_node, title: mcc_node, style: " top: #{ top_start + space_bet_rows * (idx / num_cols)}em; left: #{20 * (idx % num_cols)}em", cluster_idx: cluster_idx, tier_idx: tier_idx, idx: idx, class: classname}
                %a{href: "https://medidata.atlassian.net/browse/#{mcc_node}"}= mcc_node[:summary]
            - top_start += space_bet_tiers + space_bet_rows * ( ((tier.length - 1) / num_cols) + 1)

    %script{src: 'http://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js'}
    %script{src: 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/jquery-ui.min.js'}
    -#%script{src: 'http://jsplumbtoolkit.com/js/jquery.jsPlumb-1.3.16-all-min.js'}
    %script{src: 'http://jsplumb.org/js/jquery.jsPlumb-1.3.16-all-min.js'}

    :javascript



      ;(function() {

      	window.jsPlumbDemo = {

      		init : function() {

      			jsPlumb.importDefaults({
      				DragOptions : { cursor: "pointer", zIndex:2000 },
      				HoverClass:"connector-hover"
      			});

      			var connectorStrokeColor = "rgba(50, 50, 200, 1)",
      				connectorHighlightStrokeColor = "rgba(180, 180, 200, 1)",
      				hoverPaintStyle = { strokeStyle:"#7ec3d9" };			// hover paint style is merged on normal style, so you
      			                                                        // don't necessarily need to specify a lineWidth


      	        var stateMachineConnector = {
      				connector:"StateMachine",
      				paintStyle:{lineWidth:3,strokeStyle:"#056"},
      				hoverPaintStyle:{strokeStyle:"#dbe300"},
      				endpoint:"Blank",
      				anchor:"Continuous",
      				overlays:[ ["PlainArrow", {location:1, width:20, length:12} ], ["Diamond", {location: 0, width: 8, length: 8}]]
      			};

      			jQuery.each( #{ all_connections }, function(i, connection){
      			    console.log(i + ") processing " + connection [0] + ' -> ' + connection[1]);
      			    var params = { source: connection[0], target: connection[1]}
      			    jsPlumb.connect(params, stateMachineConnector);
      			    jQuery('#' + params.source).mouseover( function(){
                          			         jsPlumb.select({source: params.source }).setHover(true).each( function(x){  jQuery(x.target[0]).addClass('hovertarget')  } );
                          			         jsPlumb.select({target: params.source }).each( function(x){  jQuery(x.source[0]).addClass('hoversource')  } );

                          			         });
                    jQuery('#' + params.source).mouseout(  function(){
                         jsPlumb.select({source: params.source }).setHover(false).each( function(x){  jQuery(x.target[0]).removeClass('hovertarget')  } );
                         jsPlumb.select({target: params.source }).each( function(x){  jQuery(x.source[0]).removeClass('hoversource')  } );
                          })
      			})
      			 // jsPlumb.connect({ source: "DosingFactorLevel", target: "DosingFactor"}, stateMachineConnector);

                jsPlumb.draggable(jsPlumb.getSelector(".window"), { containment:".model_map"});
      		}
      	}
      	  jsPlumb.reset();
      	  jsPlumb.setRenderMode(jsPlumb.SVG);
          jsPlumbDemo.init()
      })()





